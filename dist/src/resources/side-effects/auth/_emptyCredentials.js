"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._emptyCredentials = exports._defaultCredentials = void 0;
const STRING_PRIVATE = '[string:Private]';
const _defaultCredentials = {
    accessToken: '',
    accountNumber: '',
    apiServer: '',
    apiUrl: '',
    apiVersion: 'v1',
    authUrl: '',
    debugVebosity: 0,
    expiresAt: undefined,
    expiresIn: 0,
    fromApi: true,
    fromCache: false,
    keyDir: './keys',
    keyFile: '',
    practiceAccount: false,
    refreshToken: '',
    seedToken: '',
    serverTime: undefined,
    toString(indent = 4) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        return JSON.stringify(Object.assign(Object.assign({}, Object.assign(Object.assign({}, this), { config_: Object.assign(Object.assign({}, this.config_), { headers: Object.assign(Object.assign({}, (_a = this.config_) === null || _a === void 0 ? void 0 : _a.headers), { Authorization: `${((_d = (_c = (_b = this.config_) === null || _b === void 0 ? void 0 : _b.headers) === null || _c === void 0 ? void 0 : _c.Authorization) !== null && _d !== void 0 ? _d : '').slice(0, 15)} [Redacted] ...` }) }) })), { accessToken: STRING_PRIVATE, keyFile: './keys/[Private]', refreshToken: STRING_PRIVATE, response_: Object.assign(Object.assign(Object.assign({}, this.response_), { headers: Object.assign(Object.assign({}, (_e = this.response_) === null || _e === void 0 ? void 0 : _e.headers), { Authorization: `${((_h = (_g = (_f = this.config_) === null || _f === void 0 ? void 0 : _f.headers) === null || _g === void 0 ? void 0 : _g.Authorization) !== null && _h !== void 0 ? _h : '').slice(0, 15)} [Redacted] ...` }), request: Object.assign(Object.assign({}, (_j = this.response_) === null || _j === void 0 ? void 0 : _j.request), { _header: '[HTTP Header Fields]', _redirectable: '[Writable]', agent: '[Agent]', res: ' [IncomingMessage]', socket: '[TLSSocket]' }) }), Object.assign(Object.assign({}, (_k = this.response_) === null || _k === void 0 ? void 0 : _k.config), { config: Object.assign(Object.assign({}, (_m = (_l = this.response_) === null || _l === void 0 ? void 0 : _l.config) === null || _m === void 0 ? void 0 : _m.headers), { headers: {
                        // ...this.response_?.config?.headers?.Authorization,
                        Authorization: `${(_q = ((_p = (_o = this.config_) === null || _o === void 0 ? void 0 : _o.headers) === null || _p === void 0 ? void 0 : _p.Authorization).slice(0, 15)) !== null && _q !== void 0 ? _q : ''} [Redacted] ...`,
                    } }) })), seedToken: STRING_PRIVATE }), null, indent);
    },
    toValue() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        return JSON.parse(JSON.stringify(Object.assign(Object.assign({}, this), { accessToken: STRING_PRIVATE, config_: Object.assign(Object.assign({}, this.config_), { headers: Object.assign(Object.assign({}, (_a = this.config_) === null || _a === void 0 ? void 0 : _a.headers), { Authorization: `${((_d = (_c = (_b = this.config_) === null || _b === void 0 ? void 0 : _b.headers) === null || _c === void 0 ? void 0 : _c.Authorization) !== null && _d !== void 0 ? _d : '').slice(0, 15)} [Redacted] ...` }) }), keyFile: './keys/[Private]', refreshToken: STRING_PRIVATE, response_: Object.assign(Object.assign({}, this.response_), { config: Object.assign(Object.assign({}, (_e = this.response_) === null || _e === void 0 ? void 0 : _e.config), { 
                    // ...this.response_?.config?.headers,
                    Authorization: `${((_h = (_g = (_f = this.config_) === null || _f === void 0 ? void 0 : _f.headers) === null || _g === void 0 ? void 0 : _g.Authorization) !== null && _h !== void 0 ? _h : '').slice(0, 15)} [Redacted] ...` }), headers: Object.assign(Object.assign({}, (_j = this.response_) === null || _j === void 0 ? void 0 : _j.headers), { Authorization: `${((_m = (_l = (_k = this.config_) === null || _k === void 0 ? void 0 : _k.headers) === null || _l === void 0 ? void 0 : _l.Authorization) !== null && _m !== void 0 ? _m : '').slice(0, 15)} [Redacted] ...` }), request: Object.assign(Object.assign({}, (_o = this.response_) === null || _o === void 0 ? void 0 : _o.request), { _header: '[HTTP Header Fields]', _redirectable: '[Writable]', agent: '[Agent]', res: '[IncomingMessage]', socket: '[TLSSocket]' }) }), seedToken: STRING_PRIVATE })));
    },
    tokenExpiration: undefined,
    tokenType: '',
};
exports._defaultCredentials = _defaultCredentials;
const _emptyCredentials = () => {
    return Object.assign(Object.assign({}, _defaultCredentials), { accessToken: '', accountNumber: '', apiServer: '', apiUrl: '', apiVersion: 'v1', debugVebosity: 0, expiresIn: 0, fromCache: false, keyDir: './keys', keyFile: '', practiceAccount: false, refreshToken: '', seedToken: '', tokenType: '' });
};
exports._emptyCredentials = _emptyCredentials;
// config_:null = _config;
// response_:null = response;
// configurl_:null = `${_config.url}`.split('questrade.com/')[1];
// urlTimeUTC:null = new Date(credentials.response_.headers.date);
// ?.Authorization
//# sourceMappingURL=data:application/json;base64,