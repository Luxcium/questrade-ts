{"version":3,"file":"debugAndTesting.js","sourceRoot":"","sources":["../../src/debugAndTesting.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\n// tslint:disable-next-line: no-implicit-dependencies\nimport { default as R } from 'ramda';\nimport { _redeemToken } from './api';\nimport { dateRangeFromNow, void0 } from './utils';\n// import { qtEnumerations as Enumerations } from 'questrade-api-enumerations';\n\n(async () => {\n  void0(R);\n  const { credentials, qtApi } = await _redeemToken(axios)(\n    'JPkAws5CSK1GkAzpVovk4Q3nwVbUTUPA0'\n  );\n  // console.log(credentials);\n  // const serverTime = await qtApi.getServerTime();\n  // console.log(serverTime);\n  const [timeStart, timeEnd] = dateRangeFromNow(10);\n\n  const results = {\n    setAccount: qtApi.setAccount,\n    getServerTime: await qtApi.getServerTime(),\n    get: {\n      accounts: {\n        activities: (await qtApi.get.accounts.activities(timeStart)(\n          timeEnd\n        ))[0],\n        orders: (await qtApi.get.accounts.orders()(timeStart)(timeEnd))[0],\n        ordersAll: (await qtApi.get.accounts.ordersAll(timeStart)(timeEnd))[0],\n        ordersByIds: qtApi.get.accounts.ordersByIds,\n        executions: (await qtApi.get.accounts.executions(timeStart)(\n          timeEnd\n        ))[0],\n        balances: await qtApi.get.accounts.balances(),\n        positions: await qtApi.get.accounts.positions(),\n        allAccounts: await qtApi.get.accounts.allAccounts(),\n        time: await qtApi.get.accounts.time(),\n      },\n      markets: {\n        candlesById: qtApi.get.markets.candlesById(timeStart)(timeEnd),\n        quotes: {\n          byStrategies: qtApi.get.markets.quotes.byStrategies,\n          options: qtApi.get.markets.quotes.options.byIds,\n          byIds: qtApi.get.markets.quotes.byIds,\n        },\n        allMarkets: void0(await qtApi.get.markets.allMarkets()),\n      },\n      symbols: {\n        optionsById: qtApi.get.symbols.optionsById,\n        byIds: qtApi.get.symbols.byIds,\n        search: qtApi.get.symbols.search,\n        searchAll: qtApi.get.symbols.searchAll,\n        searchCount: qtApi.get.symbols.searchCount,\n      },\n    },\n  };\n  // results.search = await qtApi.get.symbols.search('t');\n  // console.dir(results.get.accounts);\n  // console.dir(results.get.markets);\n  // console.dir(results.get.symbols);\n  // aapl : 8049\n  const candles = await results.get.markets.candlesById('OneDay')(8049);\n  candles.map(candle => {\n    console.log(candle.hash.short);\n  });\n\n  return credentials;\n})()\n  // .then((cred: any) => console.log(cred))\n  .catch(error => console.log('error message:', error.message));\n\n/*\n  setAccount,\n    getServerTime,\n    get: {\n      accounts: {\n        activities,\n        orders,\n        ordersAll,\n        ordersByIds,\n        executions,\n        balances,\n        positions,\n        allAccounts: allAccounts,\n        time: getServerTime,\n      },\n      markets: {\n        candlesById: marketCandlesById,\n        quotes: {\n          byStrategies,\n          options,\n          byIds: marketsQuotesByIds,\n        },\n        allMarkets: markets,\n      },\n      symbols: {\n        optionsById,\n        byIds: symbolsByIds,\n        search,\n        searchAll,\n        searchCount,\n      },\n    },\n\n  */\n"]}