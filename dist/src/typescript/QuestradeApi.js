"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"QuestradeApi.js","sourceRoot":"","sources":["../../../src/typescript/QuestradeApi.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  AccountStatus,\n  AccountType,\n  ClientAccountType,\n} from 'questrade-api-enumerations';\n\nimport {\n  AcountNumberString,\n  IAccount,\n  IAccountActivity,\n  IBalances,\n  ICandle,\n  IExecution,\n  IMarket,\n  IOptionChain,\n  IOptionsQuote,\n  IOrder,\n  IPosition,\n  IQuote,\n  IStrategiesQuotes,\n  ISymbol,\n  ISymbolSearchResult,\n  OptionsFilters,\n  StrategyVariantRequest,\n} from '.';\nimport { IMyBalances } from './IMyBalances';\n\n// dateRange<R>\nexport type DateRange<R> = (startTime: string) => (endTime: string) => R;\n\nexport interface QuestradeApi {\n  myBalances: QtApiMyBalances;\n  serverTime: Date | 'ERROR';\n  account: QtApiAccount;\n  market: QtApiMarket;\n  getQuotes: QtApiQuotes;\n  getOptionsQuotes: QtApiOptionsQuotes;\n  getSymbols: QtApiSymbols;\n  getOptionChains: QtApiOptionChains;\n  search: QtApiSearch;\n}\n\nexport type QtApiMyBalances = () => Promise<IMyBalances>;\n\nexport interface QtApiAccount {\n  currentAccount: string;\n  getActivities(\n    startTime: string,\n  ): (endTime: string) => Promise<IAccountActivity[]>;\n\n  getAllAccounts(): Promise<IAccount[]>;\n  getBalances(): Promise<IBalances>;\n  getExecutions(startTime: string): (endTime: string) => Promise<IExecution[]>;\n  getOrders(stateFilter?: string | undefined): DateRange<Promise<IOrder[]>>;\n  getOrdersByIds(orderId: number[]): Promise<IOrder[]>;\n  getPositions(): Promise<IPosition[]>;\n  getServerTime(): Promise<Date>;\n}\n\nexport interface QtApiMarket {\n  getAllMarkets(): Promise<IMarket[]>;\n  getCandlesByStockId(\n    symbolID: number,\n  ): (interval?: string | undefined) => DateRange<Promise<ICandle[]>>;\n}\nexport interface QtApiQuotes {\n  byStockIds(ids: number[]): Promise<IQuote[]>;\n  byStrategies(\n    strategyVariantRequestData: StrategyVariantRequest,\n  ): Promise<IStrategiesQuotes>;\n}\n\nexport interface QtApiOptionsQuotes {\n  fromFilter(filters: OptionsFilters): Promise<IOptionsQuote[]>;\n  byOptionsIds(optionIds: number[]): Promise<IOptionsQuote[]>;\n}\n\nexport interface QtApiSymbols {\n  byStockIds(stockIds: number[]): Promise<ISymbol[]>;\n}\n\nexport interface QtApiOptionChains {\n  byStockId(stockId: number): Promise<IOptionChain[]>;\n}\nexport interface QtApiSearch {\n  stock(\n    prefix: string,\n    offset?: number | undefined,\n  ): Promise<ISymbolSearchResult[]>;\n  allStocks(\n    prefix: string,\n    offset?: number | undefined,\n  ): Promise<ISymbolSearchResult[]>;\n  countResults(prefix: string): Promise<number>;\n}\n\nexport interface QuestradeApi2 {\n  currentAccount: string;\n  myBalances: Promise<{\n    perCurrency: {\n      CAD: {\n        startOfDay: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        current: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n      USD: {\n        startOfDay: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        current: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n    };\n    combined: {\n      CAD: {\n        startOfDay: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        current: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n      USD: {\n        startOfDay: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        current: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n    };\n    current: {\n      perCurrency: {\n        CAD: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        USD: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n      combined: {\n        CAD: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        USD: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n    };\n    startOfDay: {\n      combined: {\n        CAD: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        USD: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n      perCurrency: {\n        CAD: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        USD: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n    };\n    CAD: {\n      perCurrency: {\n        startOfDay: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        current: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n      combined: {\n        startOfDay: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n        current: {\n          currency: 'USD' | 'CAD';\n          cash: number;\n          marketValue: number;\n          totalEquity: number;\n          buyingPower: number;\n          maintenanceExcess: number;\n          isRealTime: boolean;\n        };\n      };\n    };\n    USD: {\n      combined: {\n        startOfDay: {\n          startOfDay: {\n            currency: 'USD' | 'CAD';\n            cash: number;\n            marketValue: number;\n            totalEquity: number;\n            buyingPower: number;\n            maintenanceExcess: number;\n            isRealTime: boolean;\n          };\n          current: {\n            currency: 'USD' | 'CAD';\n            cash: number;\n            marketValue: number;\n            totalEquity: number;\n            buyingPower: number;\n            maintenanceExcess: number;\n            isRealTime: boolean;\n          };\n        };\n        current: {\n          startOfDay: {\n            currency: 'USD' | 'CAD';\n            cash: number;\n            marketValue: number;\n            totalEquity: number;\n            buyingPower: number;\n            maintenanceExcess: number;\n            isRealTime: boolean;\n          };\n          current: {\n            currency: 'USD' | 'CAD';\n            cash: number;\n            marketValue: number;\n            totalEquity: number;\n            buyingPower: number;\n            maintenanceExcess: number;\n            isRealTime: boolean;\n          };\n        };\n      };\n      perCurrency: {\n        startOfDay: {\n          startOfDay: {\n            currency: 'USD' | 'CAD';\n            cash: number;\n            marketValue: number;\n            totalEquity: number;\n            buyingPower: number;\n            maintenanceExcess: number;\n            isRealTime: boolean;\n          };\n          current: {\n            currency: 'USD' | 'CAD';\n            cash: number;\n            marketValue: number;\n            totalEquity: number;\n            buyingPower: number;\n            maintenanceExcess: number;\n            isRealTime: boolean;\n          };\n        };\n        current: {\n          startOfDay: {\n            currency: 'USD' | 'CAD';\n            cash: number;\n            marketValue: number;\n            totalEquity: number;\n            buyingPower: number;\n            maintenanceExcess: number;\n            isRealTime: boolean;\n          };\n          current: {\n            currency: 'USD' | 'CAD';\n            cash: number;\n            marketValue: number;\n            totalEquity: number;\n            buyingPower: number;\n            maintenanceExcess: number;\n            isRealTime: boolean;\n          };\n        };\n      };\n    };\n  }>;\n  serverTime: Date | 'ERROR';\n  account: {\n    getActivities(\n      startTime: string,\n    ): (\n      endTime: string,\n    ) => Promise<\n      {\n        /** trade date */\n        tradeDate: Date | string;\n        /** transaction date */\n        transactionDate: Date | string;\n        /** settlement date */\n        settlementDate: Date | string;\n        /** activity action */\n        action: string;\n        /** symbol name */\n        symbol: string;\n        /** symbol ID */\n        stockId: string | number;\n        /** description */\n        description: string;\n        /** enumeration Currency */\n        currency: 'USD' | 'CAD';\n        /** the quantity */\n        quantity: number;\n        /** the price */\n        price: number;\n        /** gross amount */\n        grossAmount: number;\n        /** the commission */\n        commission: number;\n        /** net Amount */\n        netAmount: number;\n        /** activity Type */\n        type: string;\n      }[]\n    >;\n\n    getAllAccounts(): Promise<\n      {\n        type: AccountType;\n        number: AcountNumberString;\n        status: AccountStatus;\n        isPrimary: boolean;\n        isBilling: boolean;\n        clientAccountType: ClientAccountType;\n      }[]\n    >;\n    getBalances(): Promise<IBalances>;\n    getExecutions(\n      startTime: string,\n    ): (endTime: string) => Promise<IExecution[]>;\n    getOrders(stateFilter?: string | undefined): DateRange<Promise<IOrder[]>>;\n    getOrdersByIds(orderId: number[]): Promise<IOrder[]>;\n    getPositions(): Promise<IPosition[]>;\n    getServerTime(): Promise<Date>;\n  };\n  market: {\n    getAllMarkets(): Promise<IMarket[]>;\n    getCandlesByStockId(\n      symbolID: number,\n    ): (interval?: string | undefined) => DateRange<Promise<ICandle[]>>;\n  };\n  getQuotes: {\n    byStockIds(ids: number[]): Promise<IQuote[]>;\n    byStrategies(\n      strategyVariantRequestData: StrategyVariantRequest,\n    ): Promise<IStrategiesQuotes>;\n  };\n  getOptionsQuotes: {\n    fromFilter(filters: OptionsFilters): Promise<IOptionsQuote[]>;\n    byOptionsIds(optionIds: number[]): Promise<IOptionsQuote[]>;\n  };\n  getSymbols: {\n    byStockIds(stockIds: number[]): Promise<ISymbol[]>;\n  };\n  getOptionChains: {\n    byStockId(stockId: number): Promise<IOptionChain[]>;\n  };\n  search: {\n    stock(\n      prefix: string,\n      offset?: number | undefined,\n    ): Promise<ISymbolSearchResult[]>;\n    allStocks(\n      prefix: string,\n      offset?: number | undefined,\n    ): Promise<ISymbolSearchResult[]>;\n    countResults(prefix: string): Promise<number>;\n  };\n}\n"]}