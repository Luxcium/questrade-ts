{"version":3,"file":"testEnumerations.js","sourceRoot":"","sources":["../../../src/test/testEnumerations.ts"],"names":[],"mappings":"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","sourcesContent":["import { Enumerations } from '..';\n\nexport const testEnumerations = async () => {\n  const testCurrency = async () => {\n    const currency = Enumerations.Currency;\n\n    console.log('/** Specifies all supported currency codes. */\\n', currency);\n\n    return currency;\n  };\n  const testListingExchange = async () => {\n    const listingexchange = Enumerations.ListingExchange;\n\n    console.log(\n      '/** Specifies all supported listing exchanges. */\\n',\n      listingexchange\n    );\n\n    return listingexchange;\n  };\n  const testAccountType = async () => {\n    const accounttype = Enumerations.AccountType;\n\n    console.log(\n      '/** Specifies all supported user account types. */\\n',\n      accounttype\n    );\n\n    return accounttype;\n  };\n  const testClientAccountType = async () => {\n    const clientaccounttype = Enumerations.ClientAccountType;\n\n    console.log(\n      '/** Specifies all supported account client types. */\\n',\n      clientaccounttype\n    );\n\n    return clientaccounttype;\n  };\n  const testAccountStatus = async () => {\n    const accountstatus = Enumerations.AccountStatus;\n\n    console.log(\n      '/** Specifies all supported account status values. */\\n',\n      accountstatus\n    );\n\n    return accountstatus;\n  };\n  const testTickType = async () => {\n    const ticktype = Enumerations.TickType;\n\n    console.log(\n      '/** Specifies all supported market data tick types. */\\n',\n      ticktype\n    );\n\n    return ticktype;\n  };\n  const testOptionType = async () => {\n    const optiontype = Enumerations.OptionType;\n\n    console.log('/** Specifies all supported option types. */\\n', optiontype);\n\n    return optiontype;\n  };\n  const testOptionDurationType = async () => {\n    const optiondurationtype = Enumerations.OptionDurationType;\n\n    console.log(\n      '/** Specifies all supported option duration types. */\\n',\n      optiondurationtype\n    );\n\n    return optiondurationtype;\n  };\n  const testOptionExerciseType = async () => {\n    const optionexercisetype = Enumerations.OptionExerciseType;\n\n    console.log(\n      '/** Specifies all supported option exercise types. */\\n',\n      optionexercisetype\n    );\n\n    return optionexercisetype;\n  };\n  const testSecurityType = async () => {\n    const securitytype = Enumerations.SecurityType;\n\n    console.log(\n      '/** Specifies all supported security types. */\\n',\n      securitytype\n    );\n\n    return securitytype;\n  };\n  const testOrderStateFilterType = async () => {\n    const orderstatefiltertype = Enumerations.OrderStateFilterType;\n\n    console.log(\n      '/** Specifies all supported order state filter types. */\\n',\n      orderstatefiltertype\n    );\n\n    return orderstatefiltertype;\n  };\n  const testOrderAction = async () => {\n    const orderaction = Enumerations.OrderAction;\n\n    console.log(\n      '/** Specifies all supported order side values. */\\n',\n      orderaction\n    );\n\n    return orderaction;\n  };\n  const testOrderSide = async () => {\n    const orderside = Enumerations.OrderSide;\n\n    console.log(\n      '/** Specifies all supported client order side values. */\\n',\n      orderside\n    );\n\n    return orderside;\n  };\n  const testOrderType = async () => {\n    const ordertype = Enumerations.OrderType;\n\n    console.log('/** Specifies all supported order types. */\\n', ordertype);\n\n    return ordertype;\n  };\n  const testOrderTimeInForce = async () => {\n    const ordertimeinforce = Enumerations.OrderTimeInForce;\n\n    console.log(\n      '/** Specifies all  ordertimeinforcesupported order Time-In-Force instructions. */\\n',\n      ordertimeinforce\n    );\n\n    return ordertimeinforce;\n  };\n  const testOrderState = async () => {\n    const orderstate = Enumerations.OrderState;\n\n    console.log('/** Specifies all supported order states. */\\n', orderstate);\n\n    return orderstate;\n  };\n  const testHistoricalDataGranularity = async () => {\n    const historicaldatagranularity = Enumerations.HistoricalDataGranularity;\n\n    console.log(\n      '/** Specifies all supported historicaldatagranularity order execution status values. */\\n',\n      historicaldatagranularity\n    );\n\n    return historicaldatagranularity;\n  };\n  const testOrderClass = async () => {\n    const orderclass = Enumerations.OrderClass;\n\n    console.log(\n      '/** Specifies all supported bracket order components. */\\n',\n      orderclass\n    );\n\n    return orderclass;\n  };\n  const testStrategyTypes = async () => {\n    const strategytypes = Enumerations.StrategyTypes;\n\n    console.log(\n      '/** Supported t strategytypesypes of strategies for multi-leg strategy orders. */\\n',\n      strategytypes\n    );\n\n    return strategytypes;\n  };\n  return {\n    testCurrency,\n    testListingExchange,\n    testAccountType,\n    testClientAccountType,\n    testAccountStatus,\n    testTickType,\n    testOptionType,\n    testOptionDurationType,\n    testOptionExerciseType,\n    testSecurityType,\n    testOrderStateFilterType,\n    testOrderAction,\n    testOrderSide,\n    testOrderType,\n    testOrderTimeInForce,\n    testOrderState,\n    testHistoricalDataGranularity,\n    testOrderClass,\n    testStrategyTypes,\n  };\n};\n"]}