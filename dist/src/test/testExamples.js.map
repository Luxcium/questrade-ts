{"version":3,"file":"testExamples.js","sourceRoot":"","sources":["../../../src/test/testExamples.ts"],"names":[],"mappings":"","sourcesContent":["// import { day, redeemToken } from '..';\n// export const testExamples = async (\n//   yourRefreshToken: string,\n//   startTime: string,\n//   endTime: string,\n//   optionExpiryDate: string,\n//   optionNumericID: number,\n//   stockNumericID: number,\n//   stockStringID: string\n// ) => {\n//   (async () => {\n//     // Using console.log (log) to output the\n//     // const log = console.log;\n//     // always put your code in a try catch block\n//     try {\n//       // Create a questrade-ts Api (qtApi) Object redeeming your Refresh Token\n//       const { qtApi: qt, credentials } = await redeemToken(yourRefreshToken);\n\n//       // list of all the differents api calls managed by this package\n\n//       console.log(await qt.get.accounts.activities(startTime)(endTime));\n//       console.log(await qt.get.accounts.orders(startTime)(endTime)('All'));\n//       console.log(await qt.get.accounts.executions(startTime)(endTime));\n//       console.log(await qt.get.accounts.balances());\n//       console.log(await qt.get.accounts.positions());\n//       console.log(await qt.get.accounts.allAccounts());\n//       console.log(await qt.get.accounts.time());\n//       console.log(\n//         await qt.get.markets.candlesById(startTime)(endTime)('OneDay')(\n//           stockNumericID\n//         )\n//       );\n//       console.log(\n//         '(await qt.get.markets.quotes.byStrategies({variants:[{variantId:1,strategy:\"custom\",[]}]}));'\n//       );\n//       console.log(\n//         await qt.get.markets.quotes.options({\n//           underlyingId: stockNumericID,\n//           expiryDate: optionExpiryDate,\n//         })\n//       );\n//       console.log(await qt.get.markets.quotes.options.byIds([optionNumericID]));\n//       console.log(await qt.get.markets.quotes.byIds([stockNumericID]));\n//       console.log(await qt.get.markets.allMarkets());\n//       console.log(await qt.get.symbols.optionsById(stockNumericID));\n//       console.log(await qt.get.symbols.search(stockStringID));\n//       console.log((await qt.get.symbols.search(stockStringID)).count);\n//       console.log(await qt.get.symbols.search.count(stockStringID));\n//       console.log(await qt.get.symbols.searchAll(stockStringID));\n//       console.log(await qt.get.symbols.byIds([stockNumericID]));\n\n//       // return private credentials\n//       console.log(credentials);\n//       // return credentials;\n//     } catch (error) {\n//       // manage your errors here if needed\n//       console.error(error.message);\n//     }\n//   })();\n// };\n// async function runExamples(isTesting: boolean = false, refreshToken: string) {\n//   if (!isTesting) return;\n\n//   // for easier reading of the examples\n//   const toISOStringDate = (dateTime: number | string) =>\n//     new Date(dateTime).toISOString();\n//   // for easier reading of the examples\n\n//   // convert days to miliseconds for calculations in date\n//   const tenDays = day(10);\n\n//   // to have a start and end dateTime to use in examples\n//   const timeNow = Date.now();\n//   const start = timeNow - tenDays;\n//   const end = timeNow;\n//   const exampleStartTime = toISOStringDate(start);\n//   const exampleEndTime = toISOStringDate(end);\n\n//   const exampleOptionExpiryDate: string = '2019-10-04T05:37:30.053Z';\n//   const exampleOptionNumericID: number = 27003348;\n//   const exampleStockNumericID: number = 8049; // 'aapl'\n//   const exampleStockStringID: string = 'aapl'; // 8049\n\n//   // you do not have to put the token in plain text you should import it from elsewhere\n//   // const refreshToken = 'YOUR-TOKEN-HERE_jKi1YCwCjAMJFugwD4A8cgb0';\n//   // const refreshToken = ''; // myrefresh token have been revoked prior to publishing\n//   // using async Immediately Invoked Function Expressions to avoid using then().catch()\n\n//   await testExamples(\n//     refreshToken,\n//     exampleStartTime,\n//     exampleEndTime,\n//     exampleOptionExpiryDate,\n//     exampleOptionNumericID,\n//     exampleStockNumericID,\n//     exampleStockStringID\n//   );\n\n//   return;\n// }\n\n// export const testAll = async (token: string) => {\n//   return runExamples(true, token);\n// };\n\n// export const partialTests = (token: string) => {\n//   return { token };\n// };\n"]}