{"version":3,"file":"_axiosApi.js","sourceRoot":"","sources":["../../../../../../src/api/core/AxiosRequestApi/_axiosApi/_axiosApi.ts"],"names":[],"mappings":";;;AAAA,0DAAqE;AACrE,6CAAoD;AAQpD,aAAK,CAAC,CAAC,SAAsB,eAAK,EAAE,EAAE;IAEpC,OAAO,CAAC,WAAwB,EAAE,EAAE;QAElC,OAAO,CAAI,WAAqB,IAAI,EAAE,OAAe,KAAK,EAAE,EAAE;YAE5D,OAAO,KAAK,EAAK,QAAgB,EAAc,EAAE;gBAE/C,MAAM,GAAG,GAAG,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC;gBAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,EAAoB,CAAC;gBACpD,MAAM,aAAa,GAAG,UAAU,WAAW,CAAC,WAAW,EAAE,CAAC;gBAC1D,MAAM,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAC;gBAC3C,MAAM,IAAI,GAAG,QAAQ,CAAC;gBACtB,MAAM,OAAO,GAAG,EAAE,aAAa,EAAE,QAAQ,EAAE,CAAC;gBAC5C,MAAM,MAAM,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;gBAE9C,IAAI;oBAEF,MAAM,QAAQ,GAAG,CAAC,MAAM,MAAM,CAAC,MAAM,CAAC,CAAqB,CAAC;oBAC5D,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;wBAElB,MAAM,gBAAQ,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;qBAClE;oBAED,OAAO,QAAQ,CAAC,IAAI,CAAC;iBAEtB;gBAAC,OAAO,KAAK,EAAE;oBAEd,MAAM,gBAAQ,CAAC,KAAK,CAAC,CAAC;iBAEvB;YACH,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { AxiosResponse, AxiosStatic, default as axios } from 'axios';\nimport { logError, void0 } from '../../../../utils';\nimport { Credentials } from '../../typescript';\n\n/**\n * PROVIDE: credentials, VERB string, postData with D data type (or null)\n * and endpoint string with R return type, THEN GET: a Promise<R>\n */\n// Deprecated _axiosApi\nvoid0((_axios: AxiosStatic = axios) => {\n  //\n  return (credentials: Credentials) => {\n    //\n    return <D>(postData: D | null = null, VERB: string = 'GET') => {\n      //\n      return async <R>(endpoint: string): Promise<R> => {\n        //\n        const url = credentials.apiUrl + endpoint;\n        const method = VERB.toLowerCase() as 'get' | 'post';\n        const Authorization = `Bearer ${credentials.accessToken}`;\n        const location = credentials.accountNumber;\n        const data = postData;\n        const headers = { Authorization, location };\n        const config = { url, method, headers, data };\n        //\n        try {\n          //\n          const response = (await _axios(config)) as AxiosResponse<R>;\n          if (!response.data) {\n            //\n            throw logError(new Error(\"Can't retrive data from call to API\"));\n          }\n          //\n          return response.data;\n          //\n        } catch (error) {\n          //\n          throw logError(error);\n          //\n        }\n      };\n    };\n  };\n});\n"]}