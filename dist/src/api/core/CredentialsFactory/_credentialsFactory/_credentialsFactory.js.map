{"version":3,"file":"_credentialsFactory.js","sourceRoot":"","sources":["../../../../../../src/api/core/CredentialsFactory/_credentialsFactory/_credentialsFactory.ts"],"names":[],"mappings":";;;AAAA,0DAAsD;AACtD,6BAAqC;AAOrC,4DAAyD;AAGzD,MAAM,cAAc,GAAG,CAAC,SAAsB,eAAK,EAAE,EAAE,CAAC,CACtD,WAAwB,EACxB,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,gBAAY,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAiB,OAAO,CAAC,EAAE,CAAC;AAE9E,MAAM,YAAY,GAAG,CAAC,SAAsB,eAAK,EAAE,EAAE,CAAC,CACpD,WAAwB,EACxB,EAAE,CAAC,KAAK,IAAI,EAAE,CACd,gBAAY,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAqB,WAAW,CAAC,EAAE,CAAC;AAI1D,QAAA,mBAAmB,GAAG,CAAC,SAAsB,eAAK,EAAE,EAAE,CAAC,KAAK,EACvE,KAAa,EACb,EAAE;IACF,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;KAEvB;IACD,MAAM,WAAW,GAAG,MAAM,qCAAiB,EAAE,CAAC,KAAK,CAAC,CAAC;IAErD,IAAI;QACF,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC;QACtD,MAAM,aAAa,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,WAAW,EAAE,CAAC;QACzC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,aAAa,EAAE,CAAC;QAEvC,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACzD,MAAM,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,aAAa,CAAC;QAC/C,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;QAC5C,MAAM,QAAQ,GAAG,UAAU,GAAG,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;QAE3D,WAAW,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,kBAAkB,EAAE,CAAC;QAChE,WAAW,CAAC,eAAe,GAAG,IAAI,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,CAAC;QAC3D,WAAW,CAAC,YAAY,GAAG,QAAQ,CAAC;QACpC,WAAW,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC;QACxD,WAAW,CAAC,aAAa,GAAG,UAAU,CAAC;QAEvC,WAAW,CAAC,aAAa,GAAG,gCAAwB,CAAC,QAAQ,CAAC,CAAC;QAE/D,OAAO,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC;KACnE;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC3B,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACrD;IACD,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAGW,QAAA,wBAAwB,GAAG,CACtC,QAAoB,EACA,EAAE;IACtB,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IAED,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACzB,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;KAC3B;IAED,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC9D,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACtB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;KAC1B;IAED,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AAC5B,CAAC,CAAC;AAEW,QAAA,mBAAmB,GAAgB;IAC9C,WAAW,EAAE,EAAE;IACf,aAAa,EAAE,EAAE;IACjB,SAAS,EAAE,EAAE;IACb,MAAM,EAAE,EAAE;IACV,UAAU,EAAE,IAAI;IAChB,OAAO,EAAE,EAAE;IACX,SAAS,EAAE,SAAS;IACpB,eAAe,EAAE,SAAS;IAC1B,SAAS,EAAE,CAAC;IACZ,MAAM,EAAE,QAAQ;IAChB,OAAO,EAAE,EAAE;IACX,QAAQ,EAAE,KAAK;IACf,YAAY,EAAE,EAAE;IAChB,SAAS,EAAE,EAAE;IACb,UAAU,EAAE,SAAS;IACrB,SAAS,EAAE,EAAE;IACb,OAAO;QACL,OAAO;YACL,GAAG,IAAI;YACP,WAAW,EAAE,kBAAkB;YAC/B,OAAO,EAAE,kBAAkB;YAC3B,YAAY,EAAE,kBAAkB;YAChC,SAAS,EAAE,kBAAkB;SAC9B,CAAC,QAAQ,EAAE,CAAC;IACf,CAAC;IACD,QAAQ;QACN,OAAO;YACL,GAAG,IAAI;YACP,WAAW,EAAE,eAAe;YAC5B,OAAO,EAAE,qBAAqB;YAC9B,YAAY,EAAE,eAAe;YAC7B,SAAS,EAAE,eAAe;SAC3B,CAAC,QAAQ,EAAE,CAAC;IACf,CAAC;CACF,CAAC","sourcesContent":["import { AxiosStatic, default as axios } from 'axios';\nimport { _axiosGetApi } from '../..';\nimport {\n  AcountNumberString,\n  IAccount,\n  IAccounts,\n  ITime,\n} from '../../../typescript';\nimport { _oAuthCredentials } from '../_oAuthCredentials';\nimport { Credentials } from './typescript';\n\nconst _getServerTime = (_axios: AxiosStatic = axios) => (\n  credentials: Credentials\n) => async () => _axiosGetApi(_axios)(credentials)<Promise<ITime>>('/time')();\n\nconst _getAccounts = (_axios: AxiosStatic = axios) => (\n  credentials: Credentials\n) => async () =>\n  _axiosGetApi(_axios)(credentials)<Promise<IAccounts>>('/accounts')();\n\n// # _credentialsFactory\n/** Provide: a token string THEN GET: a 'Promise<Credentials>' */\nexport const _credentialsFactory = (_axios: AxiosStatic = axios) => async (\n  token: string\n) => {\n  if (token.length === 4) {\n    //\n  }\n  const credentials = await _oAuthCredentials()(token);\n\n  try {\n    const allAccounts = _getAccounts(_axios)(credentials);\n    const serverTimeNow = _getServerTime(_axios)(credentials);\n    const { accounts } = await allAccounts();\n    const { time } = await serverTimeNow();\n\n    const timZoneOffset = new Date(time).getTimezoneOffset();\n    const timZone = -1 * 60 * 1000 * timZoneOffset;\n    const serverTime = new Date(time).getTime();\n    const expireAt = serverTime + credentials.expiresIn * 1000;\n\n    credentials.expiresAt = new Date(expireAt).toLocaleTimeString();\n    credentials.tokenExpiration = new Date(timZone + expireAt);\n    credentials.expiresAtRaw = expireAt;\n    credentials.serverTime = new Date(timZone + serverTime);\n    credentials.serverTimeRaw = serverTime;\n\n    credentials.accountNumber = _getPrimaryAccountNumber(accounts);\n\n    console.info('Questrade Server Time:', time, '\\nStatus: ready\\n');\n  } catch (error) {\n    console.log(error.message);\n    throw new Error('_oAuth Error getting credentials');\n  }\n  return credentials;\n};\n\n/** PROVIDE: IAccount[] THEN GET:  a 'primaryAccountNumber string'  */\nexport const _getPrimaryAccountNumber = (\n  accounts: IAccount[]\n): AcountNumberString => {\n  if (accounts.length < 1) {\n    throw new Error('No account number found');\n  }\n\n  if (accounts.length === 1) {\n    return accounts[0].number;\n  }\n\n  const primary = accounts.filter(account => account.isPrimary);\n  if (primary.length > 0) {\n    return primary[0].number;\n  }\n\n  return accounts[0].number;\n};\n\nexport const _defaultCredentials: Credentials = {\n  accessToken: '',\n  accountNumber: '',\n  apiServer: '',\n  apiUrl: '',\n  apiVersion: 'v1',\n  authUrl: '',\n  expiresAt: undefined,\n  tokenExpiration: undefined,\n  expiresIn: 0,\n  keyDir: './keys',\n  keyFile: '',\n  practice: false,\n  refreshToken: '',\n  seedToken: '',\n  serverTime: undefined,\n  tokenType: '',\n  toValue() {\n    return {\n      ...this,\n      accessToken: '[string:PRIVATE]',\n      keyFile: './keys/[PRIVATE]',\n      refreshToken: '[string:PRIVATE]',\n      seedToken: '[string:PRIVATE]',\n    }.toString();\n  },\n  toString() {\n    return {\n      ...this,\n      accessToken: ' [ PRIVATE ] ',\n      keyFile: './keys/[ PRIVATE ] ',\n      refreshToken: ' [ PRIVATE ] ',\n      seedToken: ' [ PRIVATE ] ',\n    }.toString();\n  },\n};\n"]}