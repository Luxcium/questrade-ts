{"version":3,"file":"validateToken.js","sourceRoot":"","sources":["../../../../../../src/api/core/CredentialsFactory/_credentialsFactory/validateToken.ts"],"names":[],"mappings":";;AAAA,2BAAoE;AACpE,+BAA+B;AAC/B,6CAAyC;AAEzC,8EAA2E;AAE9D,QAAA,aAAa,GAAG,CAAC,OAA4B,EAAE,EAAE;IAC5D,MAAM,WAAW,GAAG,uDAA0B,CAAC,OAAO,CAAC,CAAC;IACxD,IAAI,YAAY,GAAW,WAAW,CAAC,SAAS,IAAI,EAAE,CAAC;IACvD,IAAI;QACF,IAAI,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE;YACzB,YAAI,CAAC,cAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;SACpC;aAAM;YACL,YAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAC1B;QACD,WAAW,CAAC,OAAO;YACjB,WAAW,CAAC,OAAO,IAAI,GAAG,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,SAAS,EAAE,CAAC;QAC1E,YAAY,GAAG,iBAAY,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;KAC1D;IAAC,OAAO,CAAC,EAAE;QACV,WAAW,CAAC,OAAO;YACjB,WAAW,CAAC,OAAO,IAAI,GAAG,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,SAAS,EAAE,CAAC;QAC1E,WAAM,CAAC,WAAW,CAAC,OAAO,EAAE,cAAS,CAAC,IAAI,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;YACvD,IAAI,IAAI,EAAE;gBACR,kBAAa,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,SAAS,EAAE;oBACxD,QAAQ,EAAE,MAAM;iBACjB,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,CAAC;AACvC,CAAC,CAAC","sourcesContent":["import { access, constants, readFileSync, writeFileSync } from 'fs';\nimport { dirname } from 'path';\nimport { sync } from '../../../../utils';\nimport { QuestradeAPIOptions } from '../../../typescript';\nimport { _buildCredentialsFromToken } from '../_buildCredentialsFromToken';\n\nexport const validateToken = (options: QuestradeAPIOptions) => {\n  const credentials = _buildCredentialsFromToken(options);\n  let refreshToken: string = credentials.seedToken || '';\n  try {\n    if (!!credentials.keyFile) {\n      sync(dirname(credentials.keyFile));\n    } else {\n      sync(credentials.keyDir);\n    }\n    credentials.keyFile =\n      credentials.keyFile || `${credentials.keyDir}/${credentials.seedToken}`;\n    refreshToken = readFileSync(credentials.keyFile, 'utf8');\n  } catch (_) {\n    credentials.keyFile =\n      credentials.keyFile || `${credentials.keyDir}/${credentials.seedToken}`;\n    access(credentials.keyFile, constants.F_OK, async none => {\n      if (none) {\n        writeFileSync(credentials.keyFile, credentials.seedToken, {\n          encoding: 'utf8',\n        });\n      }\n    });\n  }\n  return { refreshToken, credentials };\n};\n"]}