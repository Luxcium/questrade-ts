"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helperFunctions = exports.stringny = exports.parser = void 0;
const curry_1 = require("./curry");
const parser = (obj) => JSON.parse(JSON.stringify(obj));
exports.parser = parser;
const stringny = (obj) => JSON.stringify(obj).toString();
exports.stringny = stringny;
/** Utility function that return its first argument [index 0] and do nothing else. */
function id0(...arg0) {
    return arg0[0];
}
function idx(...args) {
    return args;
}
function void0(...arg0) {
    return void arg0;
}
const thrush = (x) => (f) => f(x);
const apply = (f) => (x) => f(x);
const compose = (f) => (g) => (x) => f(g(x));
// # cardinal :: (a -> b -> c) -> b -> a -> c
// .
// . C combinator or flip
// .
// . ```js
// . > cardinal(str => prefix => prefix + str)('-')('birds')
// . '-birds'
// . ```
const flip = (f) => (a) => (b) => f(b)(a);
// # kestrel :: a -> b -> a
// .
// . K combinator or `const`
// .
// . ```js
// . > kestrel('bird')('cat')
// . 'bird'
// . ```
const konst = (a) => (_b) => a;
/**
 *
 * @param f -
 * ### psi :: (b -\> b -\> c) -\> (a -\> b) -\> a -\> a -\> c
 *
 * PSI combinator or on
 *
 * ```js
 * > console.log(psi(x => y => x + y)((x: any) => x * -1)(3)(5)); //   -8
 * ```
 */
const psi = (f) => (g) => (x) => (y) => f(g(x))(g(y));
const urlEncode = encodeURIComponent;
exports.helperFunctions = {
    apply,
    compose,
    curry: curry_1.curry,
    flip,
    id0,
    idx,
    konst,
    parser: exports.parser,
    psi,
    stringny: exports.stringny,
    thrush,
    urlEncode,
    void0,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm9pZDAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvdm9pZDAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQWdDO0FBR3pCLE1BQU0sTUFBTSxHQUFHLENBQVUsR0FBUSxFQUFFLEVBQUUsQ0FDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFNLENBQUM7QUFEMUIsUUFBQSxNQUFNLFVBQ29CO0FBQ2hDLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQXhELFFBQUEsUUFBUSxZQUFnRDtBQUVyRSxxRkFBcUY7QUFDckYsU0FBUyxHQUFHLENBQUksR0FBRyxJQUFTO0lBQzFCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLEdBQUcsQ0FBSSxHQUFHLElBQVM7SUFDMUIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBUyxLQUFLLENBQUMsR0FBRyxJQUFXO0lBQzNCLE9BQU8sS0FBSyxJQUFJLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BQU0sTUFBTSxHQUFHLENBQUksQ0FBSSxFQUFFLEVBQUUsQ0FBQyxDQUFJLENBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hELE1BQU0sS0FBSyxHQUFHLENBQW1CLENBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRSxNQUFNLE9BQU8sR0FBRyxDQUFJLENBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUN6RSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFViw2Q0FBNkM7QUFDN0MsSUFBSTtBQUNKLHlCQUF5QjtBQUN6QixJQUFJO0FBQ0osVUFBVTtBQUNWLDREQUE0RDtBQUM1RCxhQUFhO0FBQ2IsUUFBUTtBQUNSLE1BQU0sSUFBSSxHQUFHLENBQTRCLENBQXdCLEVBQUUsRUFBRSxDQUFDLENBQ3BFLENBQUksRUFDSixFQUFFLENBQUMsQ0FBQyxDQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV2QiwyQkFBMkI7QUFDM0IsSUFBSTtBQUNKLDRCQUE0QjtBQUM1QixJQUFJO0FBQ0osVUFBVTtBQUNWLDZCQUE2QjtBQUM3QixXQUFXO0FBQ1gsUUFBUTtBQUVSLE1BQU0sS0FBSyxHQUFHLENBQVUsQ0FBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLEdBQUcsR0FBRyxDQUFJLENBQThCLEVBQUUsRUFBRSxDQUFDLENBQUksQ0FBaUIsRUFBRSxFQUFFLENBQUMsQ0FDM0UsQ0FBSSxFQUNKLEVBQUUsQ0FBQyxDQUFDLENBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTdCLE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDO0FBRXhCLFFBQUEsZUFBZSxHQUFHO0lBQzdCLEtBQUs7SUFDTCxPQUFPO0lBQ1AsS0FBSyxFQUFMLGFBQUs7SUFDTCxJQUFJO0lBQ0osR0FBRztJQUNILEdBQUc7SUFDSCxLQUFLO0lBQ0wsTUFBTSxFQUFOLGNBQU07SUFDTixHQUFHO0lBQ0gsUUFBUSxFQUFSLGdCQUFRO0lBQ1IsTUFBTTtJQUNOLFNBQVM7SUFDVCxLQUFLO0NBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGN1cnJ5IH0gZnJvbSAnLi9jdXJyeSc7XG5pbXBvcnQgdHlwZSB7IEZuQXRvQiB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgcGFyc2VyID0gPFIgPSBhbnk+KG9iajogYW55KSA9PlxuICBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpIGFzIFI7XG5leHBvcnQgY29uc3Qgc3RyaW5nbnkgPSAob2JqOiBhbnkpID0+IEpTT04uc3RyaW5naWZ5KG9iaikudG9TdHJpbmcoKTtcblxuLyoqIFV0aWxpdHkgZnVuY3Rpb24gdGhhdCByZXR1cm4gaXRzIGZpcnN0IGFyZ3VtZW50IFtpbmRleCAwXSBhbmQgZG8gbm90aGluZyBlbHNlLiAqL1xuZnVuY3Rpb24gaWQwPFQ+KC4uLmFyZzA6IFRbXSkge1xuICByZXR1cm4gYXJnMFswXTtcbn1cblxuZnVuY3Rpb24gaWR4PFQ+KC4uLmFyZ3M6IFRbXSkge1xuICByZXR1cm4gYXJncztcbn1cblxuZnVuY3Rpb24gdm9pZDAoLi4uYXJnMDogYW55W10pIHtcbiAgcmV0dXJuIHZvaWQgYXJnMDtcbn1cblxuY29uc3QgdGhydXNoID0gPFQ+KHg6IFQpID0+IDxSPihmOiAoYTogVCkgPT4gUikgPT4gZih4KTtcbmNvbnN0IGFwcGx5ID0gPFQgPSBhbnksIFIgPSBhbnk+KGY6IEZuQXRvQjxULCBSPikgPT4gKHg6IFQpID0+IGYoeCk7XG5jb25zdCBjb21wb3NlID0gPFI+KGY6IChneDogYW55KSA9PiBSKSA9PiAoZzogKHg6IGFueSkgPT4gUikgPT4gKHg6IGFueSkgPT5cbiAgZihnKHgpKTtcblxuLy8gIyBjYXJkaW5hbCA6OiAoYSAtPiBiIC0+IGMpIC0+IGIgLT4gYSAtPiBjXG4vLyAuXG4vLyAuIEMgY29tYmluYXRvciBvciBmbGlwXG4vLyAuXG4vLyAuIGBgYGpzXG4vLyAuID4gY2FyZGluYWwoc3RyID0+IHByZWZpeCA9PiBwcmVmaXggKyBzdHIpKCctJykoJ2JpcmRzJylcbi8vIC4gJy1iaXJkcydcbi8vIC4gYGBgXG5jb25zdCBmbGlwID0gPFUgPSBhbnksIFQgPSBhbnksIFIgPSBhbnk+KGY6IChiOiBVKSA9PiAoYTogVCkgPT4gUikgPT4gKFxuICBhOiBULFxuKSA9PiAoYjogVSkgPT4gZihiKShhKTtcblxuLy8gIyBrZXN0cmVsIDo6IGEgLT4gYiAtPiBhXG4vLyAuXG4vLyAuIEsgY29tYmluYXRvciBvciBgY29uc3RgXG4vLyAuXG4vLyAuIGBgYGpzXG4vLyAuID4ga2VzdHJlbCgnYmlyZCcpKCdjYXQnKVxuLy8gLiAnYmlyZCdcbi8vIC4gYGBgXG5cbmNvbnN0IGtvbnN0ID0gPFQgPSBhbnk+KGE6IFQpID0+IChfYjogdW5rbm93bikgPT4gYTtcbi8qKlxuICpcbiAqIEBwYXJhbSBmIC1cbiAqICMjIyBwc2kgOjogKGIgLVxcPiBiIC1cXD4gYykgLVxcPiAoYSAtXFw+IGIpIC1cXD4gYSAtXFw+IGEgLVxcPiBjXG4gKlxuICogUFNJIGNvbWJpbmF0b3Igb3Igb25cbiAqXG4gKiBgYGBqc1xuICogPiBjb25zb2xlLmxvZyhwc2koeCA9PiB5ID0+IHggKyB5KSgoeDogYW55KSA9PiB4ICogLTEpKDMpKDUpKTsgLy8gICAtOFxuICogYGBgXG4gKi9cbmNvbnN0IHBzaSA9IDxSPihmOiAoZ3g6IGFueSkgPT4gKGd5OiBhbnkpID0+IFIpID0+IDxUPihnOiAoeHk6IFQpID0+IGFueSkgPT4gKFxuICB4OiBULFxuKSA9PiAoeTogVCkgPT4gZihnKHgpKShnKHkpKTtcblxuY29uc3QgdXJsRW5jb2RlID0gZW5jb2RlVVJJQ29tcG9uZW50O1xuXG5leHBvcnQgY29uc3QgaGVscGVyRnVuY3Rpb25zID0ge1xuICBhcHBseSxcbiAgY29tcG9zZSxcbiAgY3VycnksXG4gIGZsaXAsXG4gIGlkMCxcbiAgaWR4LFxuICBrb25zdCxcbiAgcGFyc2VyLFxuICBwc2ksXG4gIHN0cmluZ255LFxuICB0aHJ1c2gsXG4gIHVybEVuY29kZSxcbiAgdm9pZDAsXG59O1xuIl19