{"version":3,"file":"timeutil.js","sourceRoot":"","sources":["../../../src/utils/timeutil.ts"],"names":[],"mappings":";;AAAA,MAAM,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;AACnB,QAAA,GAAG,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,GAAG,GAAG,CAAC;AAyBnC,QAAA,sBAAsB,GAAG,CACpC,SAAiB,EACjB,OAAe,EACP,EAAE;IACV,OAAO,aAAa,oBAAY,CAAC,SAAS,CAAC,YAAY,oBAAY,CACjE,OAAO,CACR,GAAG,CAAC;AACP,CAAC,CAAC;AACW,QAAA,UAAU,GAAG,GAAG,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;AACtD,QAAA,cAAc,GAAG,GAAG,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;AAEtD,QAAA,YAAY,GAAG,CAAC,QAAyB,EAAU,EAAE,CAChE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;AAEtB,QAAA,aAAa,GAAG,CAAC,QAAgB,EAAU,EAAE,CACxD,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC;AAClB,QAAA,gBAAgB,GAAG,CAAC,gBAAwB,EAAE,EAAE;IAC3D,OAAO,iBAAS,CAAC,gBAAgB,EAAE,kBAAU,EAAE,CAAC,CAAC;AACnD,CAAC,CAAC;AAEW,QAAA,SAAS,GAAG,CAAC,gBAAwB,EAAE,OAAe,EAAE,EAAE;IACrE,OAAO;QACL,oBAAY,CAAC,qBAAa,CAAC,OAAO,CAAC,GAAG,WAAG,CAAC,gBAAgB,CAAC,CAAC;QAC5D,oBAAY,CAAC,OAAO,CAAC;KACtB,CAAC;AACJ,CAAC,CAAC;AAEW,QAAA,YAAY,GAAG,CAC1B,OAAe,EACf,gBAAwB,EACxB,KAAoD,EACpD,EAAE;IACF,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,iBAAS,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAClE,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC;AACzC,CAAC,CAAC","sourcesContent":["const DAY = 24 * 60 * 60 * 1000;\nexport const day = (days: number) => days * DAY;\n\n// export function timeUtil() {\n//   //\n// }\n// let startDate = '2019-08-25';\n// let endDate = '2019-09-14T00:00:00.000000-05:00';\n// const now = Date.now;\n// export const dates = [\n//   startDate,\n//   new Date(now()).toISOString(),\n//   new Date(now()).toUTCString(),\n//   new Date(now()).toString(),\n//   new Date(now()).toLocaleString(),\n//   new Date(now()).toJSON(),\n//   new Date(startDate).toISOString(),\n//   new Date(startDate).toUTCString(),\n//   new Date(endDate).toString(),\n//   new Date(startDate).toLocaleString(),\n//   new Date(startDate).toJSON(),\n// ];\n// const offset = 9;\n// startDate = `2019-${offset}-13`;\n// endDate = `2019-${offset}-14`;\n\nexport const endpointFormatDateTool = (\n  startTime: string,\n  endTime: string\n): string => {\n  return `startTime=${dateToString(startTime)}&endTime=${dateToString(\n    endTime\n  )}&`;\n};\nexport const dateNowISO = () => new Date(Date.now()).toISOString();\nexport const dateNowNumeric = () => new Date(Date.now()).getTime();\n\nexport const dateToString = (dateTime: string | number): string =>\n  new Date(dateTime).toISOString();\n\nexport const dateToNumeric = (dateTime: string): number =>\n  new Date(dateTime).getTime();\nexport const dateRangeFromNow = (backNumberOfDays: number) => {\n  return dateRange(backNumberOfDays, dateNowISO());\n};\n\nexport const dateRange = (backNumberOfDays: number, dateNow: string) => {\n  return [\n    dateToString(dateToNumeric(dateNow) - day(backNumberOfDays)),\n    dateToString(dateNow),\n  ];\n};\n\nexport const setDateRange = <T>(\n  dateNow: string,\n  backNumberOfDays: number,\n  funct: (startTime: string) => (endTime: string) => T\n) => {\n  const [startTime, endTime] = dateRange(backNumberOfDays, dateNow);\n  return () => funct(startTime)(endTime);\n};\n\n// export const rangeTool = (startTime?: string | null) => (\n//   endTime?: string | null\n// ) => (numberOfDays?: number | null) => {\n//   const days = !!numberOfDays ? numberOfDays : 0;\n//   const endValue = !endTime ? dateNumericNow() : dateToNumeric(endTime);\n//   const startValue = !startTime ? dateNumericNow() : dateToNumeric(startTime);\n\n//   return [dateToString(endValue), dateToString(startValue + day(days))];\n// };\n\n// const naiveCalculate = (SECOND: number = 1000) => {\n//   const DAY = 24 * 60 * 60 * SECOND;\n//   return {\n//     SECOND,\n//     HOUR: 60 * 60 * SECOND,\n//     MINUTE: 60 * SECOND,\n//     DAY,\n//     WEEK5: 5 * DAY,\n//     WEEK7: 7 * DAY,\n//     MONTH: 31 * DAY,\n//     MONTH28: 28 * DAY,\n//     MONTH29: 29 * DAY,\n//     MONTH30: 30 * DAY,\n//     YEAR: 365 * DAY,\n//     YEAR366: 366 * DAY,\n//     yWEEKS: 52,\n//     yMONTHS: 12,\n//   };\n// };\n// export const naive = {\n//   inSec: naiveCalculate(1),\n//   inMiliSec: naiveCalculate(1000),\n// };\n// export const naiveSecondes = naive(1);\n// export const naiveMiliSecondes = naive(1000);\n\n// endpointFormatDateTool(startTime, endTime);\n\n// import { questrade } from \"../../classes/questradeBase\";\n// questrade(\"0I55OUTM7zHQZbG9AiwA5vY3zQY6W6qt0\").then(\n//   async will => console.log(will)\n// await will.get.orders(startDate, endDate)(), // .reduce(\n// will.get.current.accountNumber(),\n// will.get.markets\n// await will.get.supported.markets(),\n// await will.get.market.quotes([9292, 9292])\n// (pre: number, curent, _index) =>\n// console.log(\"\\n\", each.description, \"\\n\")\n// {\n//   const void0: unknown =\n//   if (!!curent.commission.valueOf()) console.log(curent.commission);\n//   return curent.commission + pre;\n//  },\n// 0\n// ()\n// );\n// );\n// date :\n// day\n// month\n// year\n// 2014-01-02T00:00:00.000000-05:00\n// 2019-09-14T09:07:37.461Z\n"]}