"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUrlHash = exports.getUrlAndDataHashes = exports.getUDatagram = exports.getDataHash = void 0;
const crypto_1 = require("crypto");
// '73B439CEB0EBEF90782E9978FEEBF88AA1540C763CAEDABA5B16223D306437E0'.length;
function getUrlHash(urlPath) {
    const HEX = 'hex';
    return {
        URL_HSH: !urlPath
            ? 'null'
            : `URL:${crypto_1.createHash('sha256')
                .update(urlPath)
                .digest(HEX)
                .toUpperCase()
                .slice(0, 18)}`,
        path: !urlPath ? 'null' : urlPath,
    };
}
exports.getUrlHash = getUrlHash;
function getDataHash(dataToHash) {
    const HEX = 'hex';
    return {
        DATA_HSH: !dataToHash
            ? 'null'
            : `DATA:${crypto_1.createHash('sha256')
                .update(JSON.stringify(dataToHash))
                .digest(HEX)
                .toUpperCase()
                .slice(0, 16)}`,
        data: !dataToHash ? 'null' : dataToHash,
    };
}
exports.getDataHash = getDataHash;
function getUDatagram(urlPath, dataToHash) {
    const HEX = 'hex';
    return {
        UDATAGRAM: `UDATAGRAM:${crypto_1.createHash('sha256')
            .update(`${!dataToHash
            ? 'null'
            : `DATA:${crypto_1.createHash('sha256')
                .update(JSON.stringify(dataToHash))
                .digest(HEX)
                .toUpperCase()}`}${!urlPath
            ? 'null'
            : `URL:${crypto_1.createHash('sha256')
                .update(urlPath)
                .digest(HEX)
                .toUpperCase()}`}`)
            .digest(HEX)
            .toUpperCase()
            .slice(0, 15)}`,
    };
}
exports.getUDatagram = getUDatagram;
function getUrlAndDataHashes(urlPath = '', dataToCache) {
    // const BASE64: BinaryToTextEncoding = 'base64';
    const HEX = 'hex';
    return {
        DATA_HSH: !dataToCache
            ? 'null'
            : `DATA:${crypto_1.createHash('sha256')
                .update(JSON.stringify(dataToCache))
                .digest(HEX)
                .toUpperCase()
                .slice(0, 16)}`,
        UDATAGRAM: `UDATAGRAM:${crypto_1.createHash('sha256')
            .update(`${!dataToCache
            ? 'null'
            : `DATA:${crypto_1.createHash('sha256')
                .update(JSON.stringify(dataToCache))
                .digest(HEX)
                .toUpperCase()}`}${!urlPath
            ? 'null'
            : `URL:${crypto_1.createHash('sha256')
                .update(urlPath)
                .digest(HEX)
                .toUpperCase()}`}`)
            .digest(HEX)
            .toUpperCase()
            .slice(0, 15)}`,
        URL_HSH: !urlPath
            ? 'null'
            : `URL:${crypto_1.createHash('sha256')
                .update(urlPath)
                .digest(HEX)
                .toUpperCase()
                .slice(0, 18)}`,
        dataToCache: !dataToCache ? 'null' : dataToCache,
        path: !urlPath ? 'null' : urlPath,
    };
}
exports.getUrlAndDataHashes = getUrlAndDataHashes;
// dATA_HASH_B62: !dataToHash
//   ? 'null'
//   : `DATA:B62${createHash('sha256')
//       .update(JSON.stringify(dataToHash))
//       .digest(BASE64)
//       .replaceAll('+', '')
//       .replaceAll('/', '')
//       .replaceAll('=', '')
//       .slice(0, 8)}`,
// uRL_HASH_B62: !urlPath
//   ? 'null'
//   : `URL:B62:${createHash('sha256')
//       .update(urlPath)
//       .digest(BASE64)
//       .replaceAll('+', '')
//       .replaceAll('/', '')
//       .replaceAll('=', '')
//       .slice(0, 8)}`,
//# sourceMappingURL=data:application/json;base64,