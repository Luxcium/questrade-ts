import { Credentials } from '../../../typescript';
declare const _defaultCredentials: Credentials;
declare const _emptyCredentials: () => {
    accessToken: string;
    accountNumber: string;
    apiServer: string;
    apiUrl: string;
    apiVersion: string;
    debugVebosity: number;
    expiresIn: number;
    fromCache: boolean;
    keyDir: string;
    keyFile: string;
    practiceAccount: boolean;
    refreshToken: string;
    seedToken: string;
    tokenType: string;
    accountCallsPerHour?: number | undefined;
    accountCallsPerSecond?: number | undefined;
    authUrl: string;
    caching?: boolean | undefined;
    config_?: import("../typescript").ClientRequestConfig | undefined;
    configUrl_?: string | undefined;
    errorloger?: import("../../../typescript").Logger | undefined;
    expiresAt_?: string | number | Date | undefined;
    expiresAt?: string | undefined;
    expiresAtRaw?: number | undefined;
    fromApi: boolean;
    hashes?: import("../../../typescript").UrlDataAndHashes<any> | undefined;
    marketCallsPerHour?: number | undefined;
    marketCallsPerSecond?: number | undefined;
    proxy?: any;
    proxyFactory?: ((credentials?: Credentials | undefined) => import("../../../typescript").ProxyFactory_) | undefined;
    remainingRequests?: import("../../../typescript").ITimeRateLimiter | undefined;
    response_?: import("../typescript").ClientResponse<any> | undefined;
    serverTime_?: string | number | Date | undefined;
    serverTime?: Date | undefined;
    serverTimeRaw?: number | undefined;
    testing?: boolean | undefined;
    tokenExpiration?: Date | undefined;
    toString(): string;
    toValue(): string;
    urlTimeUTC?: Date | undefined;
    xRatelimitRemaining?: number | undefined;
    xRatelimitReset?: number | undefined;
};
export { _defaultCredentials, _emptyCredentials };
//# sourceMappingURL=_emptyCredentials.d.ts.map