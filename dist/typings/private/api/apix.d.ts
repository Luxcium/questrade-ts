import { _getAccounts } from './AccountsCalls/_getAccounts/_getAccounts';
export declare const endPoint: {
    accounts: typeof _getAccounts;
    activities: (accountGetApi: <R>(accountEndpoint: string) => () => Promise<R>, errorlog?: import("../../typescript").Logger) => (startTime: string) => (endTime: string) => Promise<import("./api").IAccountActivity[]>;
    balances: (clientAccountGetApi: <R_1>(accountEndpoint: string) => () => Promise<R_1>, errorlog?: import("../../typescript").Logger) => () => Promise<import("../../typescript").IBalances>;
    candles: (clientGetApi: <R_2>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_2>, errorlog?: import("../../typescript").Logger) => (symbolID: number) => (interval?: string) => (startDate: string) => (endDate: string) => Promise<import("../../typescript").ICandle[]>;
    executions: (clientAccountGetApi: <R_3>(endpoint: string) => () => Promise<R_3>, errorlog?: import("../../typescript").Logger) => (startDate: string) => (endDate: string) => Promise<import("../../typescript").IExecution[]>;
    markets: (clientGetApi: <R_4>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_4>, errorlog?: import("../../typescript").Logger) => () => Promise<import("../../typescript").IMarket[]>;
    optionsById: (clientGetApi: <R_5>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_5>, errorlog?: import("../../typescript").Logger) => (symbolID: number) => Promise<import("../../typescript").IOptionChain[]>;
    optionsFilter: (clientPostApi: <D>(postData: D | null) => <R_6>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_6>) => (filters: import("../../typescript").OptionsFilters) => Promise<import("../../typescript").IOptionsQuote[]>;
    orders: (clientAccountGetApi: <R_7>(accountEndpoint: string) => () => Promise<R_7>, errorlog?: import("../../typescript").Logger) => (stateFilter?: string) => (startDate: string) => (endDate: string) => Promise<import("../../typescript").IOrder[]>;
    ordersByIds: (clientAccountGetApi: <R_8>(accountEndpoint: string) => () => Promise<R_8>, errorlog?: import("../../typescript").Logger) => (orderId: number[]) => Promise<import("../../typescript").IOrder[]>;
    positions: (clientAccountGetApi: <R_9>(accountEndpoint: string) => () => Promise<R_9>, errorlog?: import("../../typescript").Logger) => () => Promise<import("../../typescript").IPosition[]>;
    quotesByIds: (clientGetApi: <R_10>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_10>, errorlog?: import("../../typescript").Logger) => (ids: number[]) => Promise<import("../../typescript").IQuote[]>;
    quotesOptionsByIds: (clientPostApi: <D_1>(postData: D_1 | null) => <R_11>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_11>, errorlog?: import("../../typescript").Logger) => (optionIds: number[]) => Promise<import("../../typescript").IOptionsQuote[]>;
    strategies: (clientPostApi: <D_2>(postData: D_2 | null) => <R_12>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_12>, errorlog?: import("../../typescript").Logger) => (strategyVariantRequestData: import("../../typescript").StrategyVariantRequest) => Promise<import("../../typescript").IStrategiesQuotes>;
    symbolSearch: (clientGetApi: <R_13>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_13>, errorlog?: import("../../typescript").Logger) => (prefix: string, offset?: number) => Promise<import("../../typescript").ISymbolSearchResult[]>;
    symbolSearchAll: (clientGetApi: <R_14>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_14>, errorlog?: import("../../typescript").Logger) => (prefix: string, offset?: number) => Promise<import("../../typescript").ISymbolSearchResult[]>;
    symbolSearchCount: (clientGetApi: <R_15>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_15>, errorlog?: import("../../typescript").Logger) => (prefix: string) => Promise<number>;
    symbolsByIds: (clientGetApi: <R_16>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_16>, errorlog?: import("../../typescript").Logger) => (stockId: number[]) => Promise<import("../../typescript").ISymbol[]>;
    time: (clientGetApi: <R_17>(endpoint: string, handlerOptions: import("../../resources/side-effects/typescript").ProxyHandlerOptions) => () => Promise<R_17>, errorlog?: import("../../typescript").Logger) => () => Promise<Date>;
};
//# sourceMappingURL=apix.d.ts.map