{
  "name": "questrade-ts",
  "displayName": "Questrade API by Luxcium (with typescript support).",
  "description": "Unofficial Questrade API wrapper for NodeJS with full TypeScript support.",
  "version": "2.0.0c-beta",
  "author": "Luxcium <luxcium@neb401.com>",
  "license": "MIT",
  "homepage": "https://github.com/Luxcium/questrade-ts",
  "main": "./src/index.js",
  "types": "./typings/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git@github.com/luxcium/questrade-ts.git"
  },
  "bugs": {
    "url": "https://github.com/luxcium/questrade-ts/issues"
  },
  "keywords": [
    "TypeScript",
    "Canadian",
    "Stock Market API",
    "Un-Official",
    "Questrade",
    "Canada",
    "API Wrapper",
    "Questrade API",
    "Stocks",
    "Trading",
    "Luxcium",
    "TypeScript Support",
    "API wrapper",
    "TypeScript support",
    "stock market api",
    "canada",
    "Canadian"
  ],
  "scripts2": {
    "rebuild": "rimraf ./out; ./scripts/rebuild.sh",
    "run": "ts-node './src/main.ts'",
    "start": "ts-node './src/main.ts'",
    "start:bak": "#ts-node '/home/luxcium/dev/questrade-ts/src/test/playground/redis-modeling.ts'",
    "preinstall": "rm -fr node_modules; echo ''; pwd; ls -1A; echo ''",
    "postinstall": "(cd 'src/resources/' && rm -fr ./node_modules && echo '' && pwd && ls -1A && echo '' && (npm ci || npm install) && echo -e '\n― OK ―\n'  )",
    "SECTION:001": "# ========================================================",
    "predist": "yi; yarn run build:clean; yarn run rm:dist",
    "dist": "yarn run rm:playground; yarn run cp:dist",
    "postdist": "npm publish ./dist --tag latest --dry-run && npm pack ./dist --tag latest",
    "SECTION:002": "# ========================================================",
    "prebuild": "yarn run test; rm -fr ./build",
    "build": "yarn run out:cjs",
    "postbuild": "echo 'Build Completed !!!'",
    "SECTION:003": "# ========================================================",
    "preCI": "yarn run coverage;eslint --format github --fix './src/**/*.ts'",
    "CI": "echo 'Will validate if project can be build with COMMON-JS UMD AMD SYS'",
    "postCI": "concurrently -c red,green,yellow,blue -n \"COMMON JS|UMD|AMD|SYS\" --name-separator \"|\" \"yarn:out:cjs\" \"yarn:out:umd\" \"yarn:out:amd\" \"yarn:out:sys\"",
    "SECTION:004": "# ========================================================",
    "prebuild:clean": "yarn run rm:build; yarn run jest:clear",
    "build:clean": "echo 'Cleaning and will call run build'",
    "postbuild:clean": "yarn run linting; yarn run CI",
    "SECTION:005": "# ========================================================",
    "pretest": "yarn run linting",
    "test": "echo 'will skip test now'",
    "posttest": "# yarn run quick:test",
    "SECTION:006": "# ========================================================",
    "pretty": "prettier --config \"./.prettierrc\" --loglevel log -c \"./src/**/*.ts\"|| exit 1",
    "pretty:all": "prettier --config \"./.prettierrc\" --loglevel log -c \"**/*.*\" || exit 1",
    "pretty:fix": "git add .; prettier --config \"./.prettierrc\" --loglevel log -c --write \"./src/**/*.ts\" || exit 11",
    "pretty:fix:all": "# BROKEN SCRIPT # prettier --config \"./.prettierrc\" --loglevel log -c --write \"**/*.*\" || exit 17",
    "prelinting": "yarn run pretty:fix  # prettier --check --write --config .prettierrc './src/**/*.ts'  || exit 11",
    "lint": "eslint \"./src/**/*.ts\" --format=compact --fix-dry-run || exit 0",
    "lint:fix": "eslint \"./src/**/*.ts\" --fix || exit 11",
    "linting": "eslint \"./src/**/*.ts\" --format=stylish --fix || exit 15",
    "postlinting": "tsc --noEmit --pretty || exit 13",
    "out": "# ================================================================",
    "out:cjs": "tsc -b ./configs/tsconfig.commonjs.json",
    "out:umd": "#tsc -b ./configs/tsconfig.umd.json",
    "out:amd": "#tsc -b ./configs/tsconfig.amd.json",
    "out:sys": "#tsc -b ./configs/tsconfig.sys.json",
    "out:enu": "#tsc -b ./enums/tsconfig.json && yarn run cp:enu:yarn",
    "rm": "# =================================================================",
    "rm:build": "rimraf -r ./build/**/*",
    "rm:dist": "rimraf ./dist/",
    "rm:playground": "rimraf ./build/src/test/playground",
    "rm:pack1": "rimraf ./package.1.json",
    "cp": "# =================================================================",
    "cp:dist": "concurrently -n \"PACKAGE_JSON|README|LICENSE|DIST_SRC|DIST_TYPINGS\" --name-separator \"|\" \"yarn:cp:dist:1\" \"yarn:cp:dist:2\" \"yarn:cp:dist:3\" \"yarn:cp:dist:4\" \"yarn:cp:dist:5\"",
    "cp:dist:1": "copyfiles ./package.1.json ./dist/package.json && yarn run rm:pack1",
    "cp:dist:2": "copyfiles ./readme.md ./dist/readme.md",
    "cp:dist:3": "copyfiles ./LICENSE ./dist/LICENSE",
    "cp:dist:4": "copyfiles ./build/src ./dist/src",
    "cp:dist:5": "copyfiles ./build/typings ./dist/typings",
    "enu": "# ================================================================",
    "cp:enu": "concurrently \"yarn:cp:enu:1\" \"yarn:cp:enu:2\" \"yarn:cp:enu:3\" \"yarn:cp:enu:4\"",
    "cp:enu:1": "copyfiles ./enums/README.md ./build/enums/README.md",
    "cp:enu:2": "copyfiles ./enums/package.json ./build/enums/package.json",
    "cp:enu:3": "copyfiles ./enums/.npmignore ./build/enums/.npmignore",
    "cp:enu:4": "copyfiles ./enums/LICENSE.txt ./build/enums/LICENSE.txt",
    "npm:enum:publish": " npm publish ./build/enums/",
    "00": "# =================================================================",
    "quick:test": "echo will skip quick:test # jest --runInBand --silent --detectOpenHandles; rimraf ./MOCKfile",
    "jest:clear": "echo will jest:clear ;jest --clearCache; rimraf ./MOCKfile",
    "coverage": "echo will skip coverage # jest --coverage --runInBand --detectOpenHandles --silent --colors; rimraf ./MOCKfile"
  },
  "scripts": {
    "rebuild": "rimraf ./out; ./scripts/rebuild.sh",
    "start": "ts-node './src/main.ts'",
    "start:bak": "#ts-node '/home/luxcium/dev/questrade-ts/src/test/playground/redis-modeling.ts'",
    "preinstall": "rm -fr node_modules; echo ''; pwd; ls -1A; echo ''",
    "postinstall": "(cd 'src/resources/' && rm -fr ./node_modules && echo '' && pwd && ls -1A && echo '' && (npm ci || npm install) && echo -e '\n― OK ―\n'  )",
    "SECTION:002": "# ========================================================",
    "prebuild": "yarn run test; rm -fr ./build",
    "build": "yarn run out:cjs",
    "postbuild": "echo 'Build Completed !!!'",
    "SECTION:003": "# ========================================================",
    "preCI": "yarn run coverage;eslint --format github --fix './src/**/*.ts'",
    "CI": "echo 'Will validate if project can be build with COMMON-JS UMD AMD SYS'",
    "postCI": "concurrently -c red,green,yellow,blue -n \"COMMON JS|UMD|AMD|SYS\" --name-separator \"|\" \"yarn:out:cjs\" \"yarn:out:umd\" \"yarn:out:amd\" \"yarn:out:sys\"",
    "SECTION:004": "# ========================================================",
    "prebuild:clean": "yarn run rm:build; yarn run jest:clear",
    "build:clean": "echo 'Cleaning and will call run build'",
    "postbuild:clean": "yarn run linting; yarn run CI",
    "SECTION:005": "# ========================================================",
    "out": "# ================================================================",
    "out:cjs": "tsc -b ./configs/tsconfig.commonjs.json",
    "out:umd": "#tsc -b ./configs/tsconfig.umd.json",
    "out:amd": "#tsc -b ./configs/tsconfig.amd.json",
    "out:sys": "#tsc -b ./configs/tsconfig.sys.json",
    "out:enu": "#tsc -b ./enums/tsconfig.json && yarn run cp:enu:yarn",
    "enu": "# ================================================================",
    "cp:enu": "concurrently \"yarn:cp:enu:1\" \"yarn:cp:enu:2\" \"yarn:cp:enu:3\" \"yarn:cp:enu:4\"",
    "cp:enu:1": "copyfiles ./enums/README.md ./build/enums/README.md",
    "cp:enu:2": "copyfiles ./enums/package.json ./build/enums/package.json",
    "cp:enu:3": "copyfiles ./enums/.npmignore ./build/enums/.npmignore",
    "cp:enu:4": "copyfiles ./enums/LICENSE.txt ./build/enums/LICENSE.txt",
    "npm:enum:publish": " npm publish ./build/enums/",
    "00": "# =================================================================",
    "quick:test": "echo will skip quick:test # jest --runInBand --silent --detectOpenHandles; rimraf ./MOCKfile",
    "jest:clear": "echo will jest:clear ;jest --clearCache; rimraf ./MOCKfile",
    "coverage": "echo will skip coverage # jest --coverage --runInBand --detectOpenHandles --silent --colors; rimraf ./MOCKfile"
  },
  "devDependencies": {
    "@babel/core": "^7.12.10",
    "@babel/preset-env": "^7.12.11",
    "@types/eslint-config-prettier": "^6.11.0",
    "@types/eslint-plugin-prettier": "^3.1.0",
    "@types/jest": "^26.0.19",
    "@types/node": "^14.14.20",
    "@types/ramda": "^0.27.34",
    "@types/redis": "^2.8.28",
    "@typescript-eslint/eslint-plugin": "^4.11.0",
    "@typescript-eslint/parser": "^4.11.0",
    "babel-jest": "^26.6.3",
    "concurrently": "^5.3.0",
    "copyfiles": "^2.4.1",
    "eslint": "^7.16.0",
    "eslint-config-prettier": "^7.1.0",
    "eslint-formatter-github": "^1.0.11",
    "eslint-import-resolver-node": "^0.3.4",
    "eslint-plugin-fp": "^2.3.0",
    "eslint-plugin-functional": "^3.2.1",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-jsdoc": "^30.7.9",
    "eslint-plugin-jsonc": "^0.8.0",
    "eslint-plugin-prettier": "^3.3.1",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-radar": "^0.2.1",
    "eslint-plugin-security": "^1.4.0",
    "eslint-plugin-simple-import-sort": "^7.0.0",
    "eslint-plugin-sort-keys-fix": "^1.1.1",
    "eslint-plugin-tsdoc": "^0.2.11",
    "eslint-plugin-unicorn": "^24.0.0",
    "madge": "^4.0.0",
    "prettier": "^2.2.1",
    "questrade-api-enumerations": "^1.1.4",
    "rimraf": "^3.0.2",
    "snyk": "^1.437.3",
    "ts-node": "^9.1.1",
    "tslib": "^2.0.3",
    "typedoc": "^0.20.13",
    "typescript": "^4.1.3"
  }
}
